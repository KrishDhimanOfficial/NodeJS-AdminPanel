const startTime = Date.now()

import app from '../app.js'
import config from '../config/config.js'
import debug from 'debug'
import http from 'node:http'
import cluster from 'node:cluster'
import numcpu from 'node:os'
import chalk from 'chalk'
import connectDB from '../config/connectDB.js'
const log = debug('backend:server')

if (cluster.isPrimary) {
  for (let i = 0; i < numcpu.cpus().length; ++i)  cluster.fork()
  console.log(`Primary ${process.pid} is running`)

  // cluster.on('exit', (worker, code, signal) => {
  //   cluster.fork()
  //   config.node_env === 'development' && console.log(`Worker ${worker.process.pid} died. Starting a new one...`)
  // })
} else {
  const port = config.port;
  app.set('port', port)
  app.set('trust proxy', 1)
  connectDB()

  const server = http.createServer(app)  // Create HTTP server.
  server.listen(port, '0.0.0.0', () => {
    const endTime = Date.now() // ‚è± Record end time
    config.node_env === 'development' && console.log(chalk.blue(`üöÄ Startup Time: ${endTime - startTime} ms`))
    config.node_env === 'development' && console.log(chalk.yellow(`Running http://localhost:${port}/admin/login`))
  })

  server.on('error', onError)
  server.on('listening', onListening)
  server.setTimeout(10000)

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') throw error

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
      default:
        throw error
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    log('Listening on ' + bind)
  }
}